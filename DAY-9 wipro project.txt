[8:53 AM] N Murugadoss (Unverified)
# Python 3 implementation

# of simple method to find

# print pairs with given sum.
 
# Returns number of pairs

# in arr[0..n-1] with sum

# equal to 'sum'
 
 
def printPairs(arr, n, sum):
 
    # count = 0
 
    # Consider all possible

    # pairs and check their sums

    for i in range(0, n):

        for j in range(i + 1, n):

            if (arr[i] + arr[j] == sum):

                print("(", arr[i],

                      ", ", arr[j],

                      ")", sep="")
------------------------------------------------------------------

 
 
# Driver Code

arr = [1, 5, 7, -1, 5]

n = len(arr)

sum = 6

printPairs(arr, n, sum)
 
# This code is contributed

# by Smitha
same
------------------------------------------------------------------

[9:10 AM] N Murugadoss (Unverified)
# program to illustrate protected access modifier in a class
 
# super class

class Student:

	# protected data members

	_name = None

	_roll = None

	_branch = None

	# constructor

	def __init__(self, name, roll, branch): 

		self._name = name

		self._roll = roll

		self._branch = branch

	# protected member function 

	def _displayRollAndBranch(self):
 
		# accessing protected data members

		print("Roll: ", self._roll)

		print("Branch: ", self._branch)
 
 
# derived class

class Geek(Student):
 
	# constructor 

	def __init__(self, name, roll, branch): 

				Student.__init__(self, name, roll, branch) 

	# public member function 

	def displayDetails(self):

				# accessing protected data members of super class 

				print("Name: ", self._name) 

				# accessing protected member functions of super class 

				self._displayRollAndBranch()
-------------------------------------------------------------------------------------------------
 
# creating objects of the derived class	 

obj = Geek("R2J", 1706256, "Information Technology")
 
# calling public member functions of the class

obj.displayDetails() 

[9:13 AM] Sruthika (Unverified)
voted sir
[9:16 AM] Suryaprakash Yadav Rodda(rsuryaprakashyadav1@gmail.com) (Unverified)
 sir do you guys not have a holiday today?
[9:17 AM] N Murugadoss (Unverified)
class Student:

     # protected data members

     __name = None

     __roll = None

     __branch = None

     # constructor

     def __init__(self, name, roll, branch):  

          self.__name = name

          self.__roll = roll

          self.__branch = branch

     # protected member function   

     def __displayRollAndBranch(self):

          # accessing protected data members

          print("Roll: ", self.__roll)

          print("Branch: ", self.__branch)


# derived class

class Geek(Student):

       # constructor 

       def __init__(self, name, roll, branch): 

                Student.__init__(self, name, roll, branch) 

       # public member function 

       def displayDetails(self):

                 # accessing protected data members of super class 

                print("Name: ", self.__name) 

                 # accessing protected member functions of super class 

                self.__displayRollAndBranch()
-------------------------------------------------------------------------------------------
# creating objects of the derived class        

obj = Geek("R2J", 1706256, "Information Technology") 

# calling public member functions of the class

obj.displayDetails()
[9:31 AM] N Murugadoss (Unverified)
#Syntax_protected_access_modifiersclass Student:def __init__(self):self._name = "PythonLobby.com"def _funName(self):return "Method Here"class Subject(Student):pass
obj = Student()obj1 = Subject()# calling by obj. ref. of Student classprint(obj._name)      # PythonLobby.comprint(obj._funName())     # Method Here# calling by obj. ref. of Subject classprint(obj1._name)     # PythonLobby.comprint(obj1._funName())    # Method Here

===================================================================================
[9:41 AM] N Murugadoss (Unverified)
Access Specifiers or Access Modifiers in Python-(Public, Private and Protected keywords) (pythonlobby.com)
[9:44 AM] N Murugadoss (Unverified)
# Python program to demonstrate in-built poly-

# morphic functions
 
# len() being used for a string

print(len("geeks"))
 
# len() being used for a list

print(len([10, 20, 30]))

[9:45 AM] N Murugadoss (Unverified)
# A simple Python function to demonstrate 

# Polymorphism
 
def add(x, y, z = 0): 

	return x + y+z
 
# Driver code 

print(add(2, 3))

print(add(2, 3, 4))

[9:48 AM] N Murugadoss (Unverified)
class India():

	def capital(self):

		print("New Delhi is the capital of India.")
 
	def language(self):

		print("Hindi is the most widely spoken language of India.")
 
	def type(self):

		print("India is a developing country.")
 
class USA():

	def capital(self):

		print("Washington, D.C. is the capital of USA.")
 
	def language(self):

		print("English is the primary language of USA.")
 
	def type(self):

		print("USA is a developed country.")
 
obj_ind = India()

obj_usa = USA()

for country in (obj_ind, obj_usa):

	country.capital()

	country.language()

	country.type()

[9:52 AM] N Murugadoss (Unverified)
class Bird:

def intro(self):

	print("There are many types of birds.")

def flight(self):

	print("Most of the birds can fly but some cannot.")
 
class sparrow(Bird):

def flight(self):

	print("Sparrows can fly.")

class ostrich(Bird):

def flight(self):

	print("Ostriches cannot fly.")

obj_bird = Bird()

obj_spr = sparrow()

obj_ost = ostrich()
 
obj_bird.intro()

obj_bird.flight()
 
obj_spr.intro()

obj_spr.flight()
 
obj_ost.intro()

obj_ost.flight()

=========================
=============================

import re target_string = "My name is maximums and my luck numbers are 12 45 78"# split on white-space word_list = re.split(r"\s+", target_string) print(word_list)
[10:21 AM] N Murugadoss (Unverified)
import re target_string = "12-45-78"# Split only on the first occurrence# maxsplit is 1result = re.split(r"\D", target_string, maxsplit=1) print(result)
[10:22 AM] N Murugadoss (Unverified)
import re

target_string = "12-45-78"

# Split only on the first occurrence

# maxsplit is 1

result = re.split(r"\D", target_string, maxsplit=2)

print(result)
[10:23 AM] N Murugadoss (Unverified)
import re target_string = "12,45,78,85-17-89"# 2 delimiter - and ,# use OR (|) operator to combine two patternresult = re.split(r"-|,", target_string) print(result)
[10:25 AM] N Murugadoss (Unverified)
import re target_string = "PYnative   dot.com; is for, Python-developer"# Pattern to split: [-;,.\s]\s*result = re.split(r"[-;,.\s]\s*", target_string) print(result)
[10:27 AM] N Murugadoss (Unverified)
import re target_string = "Emma is a basketball player who was born on June 17, 1993. She played 112 matches with scoring average 26.12 points per game. Her weight is 51 kg."result = re.findall(r"\d+", target_string) # print all matchesprint("Found following matches") print(result)

[10:29 AM] N Murugadoss (Unverified)
Python Exercise with Practice Questions and Solutions - GeeksforGeeks
=======================================
program 1:-

import os 

def current_path(): 

	print("Current working directory before") 

	print(os.getcwd()) 

	print() 

current_path() 

os.chdir('../') 

current_path()
-------------------------------------------------------
program2:

import os

directory = "doss"

parent_dir = "D:/wipropy/"

path = os.path.join(parent_dir, directory)
 
os.mkdir(path)

print("Directory '% s' created" % directory)
---------------------------------------------------------
program 3:-
import os

file = "test.py"

location= "D:/wipropy/doss/"

path = os.path.join(location, file)

os.remove(path) 
-----------------------------------------------------
program 4:-

import os 

directory = "Geeks"

parent = "D:/Pycharm projects/"

path = os.path.join(parent, directory) 

os.rmdir(path)

---------------------------------------------------
program 5:-

import os

print(os.name)

[10:54 AM] N Murugadoss (Unverified)
create directory called , wipro
 
1. class Calculation :
 
    def __init__():
 
 
   def addtwo(x,y):

       return x+y
 
   def prod(x,y):

       return x*y
 
 
save as calc.py
 
2. class factorial
 
    def __init__():
 
    def fact(n):
 
 
       return fact
 
save it as fact.py
 
  3 . __init__.py
 
    in the same wipro directory
 
 
  4. test.py
 
      create objects of factorial and calculation

      call the methods
 
 
  Test the program
 
===========================================
 
 
 
Match(), Search(), Finditer()
 
Findall(), Split()
 
Group(), Start(), End()
 
Span()
 

# import re s = 'Readability counts.'pattern = r'[aeoui]' matches = re.finditer(pattern, s)for match in matches:     print(match)

# match() checks for a match only at the beginning of the string. re.search() checks for a match anywhere in the string
-----------------------------------------------------------------------

import re

Substring ='string'

# String1 ="We are learning regex with geeksforgeeks regex is very useful for string matching.It is fast too."

# String2 ="string We are learning regex with geeksforgeeks regex is very useful for string matching.It is fast too."
 
# Use of re.search() Method
 
print(re.search(Substring, String1, re.IGNORECASE))
-------------------------------------------------------

# Use of re.match() Method

print(re.match(Substring, String1, re.IGNORECASE))

group() returns the substring that was matched by the RE. 

start() and end() return the starting and ending index of the match.
 
span() returns both start and end indexes in a single tuple.

Since the match() method only checks if the RE matches at the

start of a string, start() will always be zero.
-----------------------------------------------------------

import re
 
# getting the match of the string

search_pattern = re.search('\d+','1234')
 
""" 

d: stands for integer

+: means a consecutive set of 

characters satisfying a condition. 

Hence d+ will match consecutive 

integer string 

"""
 
print(search_pattern.string)
 
print(search_pattern.start())
 
print(search_pattern.end())

import re

# getting the match of the string

search_pattern = re.search('\d+','abcd')
 
 
print(search_pattern)end()
 
 
print(search_pattern.end())

sources:-https://www.geeksforgeeks.org/python-datetime-module/

==========================================================================
from datetime import date
 
my_date = date(1996, 12, 11)
 
print("Date passed as argument is", my_date)

# Python program to
# print current date
----------------------------------
from datetime import date

# calling the today
# function of date class
today = date.today()

print("Today's date is", today)
-------------------------------------
from datetime import date
today = date.today()
print("Today's date is", today)
---------------------------------------
from datetime import date

# date object of today's date
today = date.today() 

print("Current year:", today.year)
print("Current month:", today.month)
print("Current day:", today.day)


Isoformat() function is used to return a string of date, time, a

-----------------------------------------------------
from datetime import date

# calling the today
# function of date class
today = date.today()

# Converting the date to the string
Str = date.isoformat(today)
print("String Representation", Str)
print(type(Str))

SOURCES:-https://www.geeksforgeeks.org/python-datetime-module/

ASSESMENT:-

Create a Vehicle class without any variables and methods
Create a Class with instance attributes
==================================================================
PROGRAM:-
Write a Python program to create a Vehicle class with max_speed and mileage instance attributes.
class Vehicle:

    def _init_(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage
class Vehicle:
    pass
class Vehicle:

    def _init_(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage

================================================================
PROGRAM:-
Create a child class Bus that will inherit all of the variables and methods of the Vehicle class
Given:

class Vehicle:

    def _init_(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage
class Vehicle:

    def _init_(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage

class Bus(Vehicle):
    pass

School_bus = Bus("School Volvo", 180, 12)
print("Vehicle Name:", School_bus.name, "Speed:", School_bus.max_speed, "Mileage:", School_bus.mileage)
==============================================================================================

PROGRAM:-

Class Inheritance
Given:

Create a Bus class that inherits from the Vehicle class. Give the capacity argument of Bus.seating_capacity() a default value of 50.

Use the following code for your parent Vehicle class.

class Vehicle:
    def _init_(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage

    def seating_capacity(self, capacity):
        return f"The seating capacity of a {self.name} is {capacity} passengers"



## Define a property that must have the same value for every class instance (object)

class Vehicle:
    # Class attribute
    color = "White"

    def _init_(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage
------------------------------------------------------------------------------
TASK:--

Create a Bus child class that inherits from the Vehicle class. The default fare charge of any vehicle is seating capacity * 100. If Vehicle is Bus instance, we need to add an extra 10% on full fare as a maintenance charge. So total fare for bus instance will become the final amount = total fare + 10% of the total fare.

class Vehicle:
    def __init__(self, seating_capacity):
        self.seating_capacity = seating_capacity
    
    # Method to calculate the default fare
    def calculate_fare(self):
        # Default fare is calculated based on seating capacity times 100
        return self.seating_capacity * 100

class Bus(Vehicle):
    # Override the calculate_fare method to include a 10% maintenance charge
    def calculate_fare(self):
        # Calculate the total fare using the base class method
        total_fare = super().calculate_fare()
        
        # Add 10% maintenance charge
        maintenance_charge = total_fare * 0.10
        
        # Final amount including the maintenance charge
        final_amount = total_fare + maintenance_charge
        
        return final_amount

if __name__ == "__main__":
    # Create a vehicle with a seating capacity of 50
    my_vehicle = Vehicle(50)
    print("Vehicle fare:", my_vehicle.calculate_fare())  # Should print 5000

# Create a bus with a seating capacity of 50
    my_bus = Bus(50)
    print("Bus fare:", my_bus.calculate_fare())  # Should print 5500
==============================================================================
class Vehicle:

    def __init__(self, name, mileage, capacity):

        self.name = name

        self.mileage = mileage

        self.capacity = capacity
 
class Bus(Vehicle):

    pass
 
School_bus = Bus("School Volvo", 12, 50)
 
# Python's built-in isinstance() function

print(isinstance(School_bus, Vehicle))

print(isinstance(School_bus, Bus))


s='Python is easy'
s1=s[-7:]
s2=s[-4:]
print(s1+s2)


SOURCE:--https://www.w3resource.com/python-exercises/class-exercises/index.php


